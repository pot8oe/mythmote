Index: src/tkj/android/homecontrol/mythmote/keymanager/KeyBindingEntry.java
===================================================================
--- src/tkj/android/homecontrol/mythmote/keymanager/KeyBindingEntry.java	(revision 151)
+++ src/tkj/android/homecontrol/mythmote/keymanager/KeyBindingEntry.java	(working copy)
@@ -27,16 +27,24 @@
 	private String command;
 
 	private boolean requiresConfirmation = false;
+	private int rowId;
 
-	public KeyBindingEntry(final String friendlyName, final MythKey mythKey,
+	public KeyBindingEntry(final int rowId, final String friendlyName, final MythKey mythKey,
 			final String command, final boolean requiresConfirm)
 	{
+		this.rowId = rowId;
 		this.command = command;
 		this.mythKey = mythKey;
 		this.friendlyName = friendlyName;
 		this.requiresConfirmation = requiresConfirm;
 	}
 
+	public KeyBindingEntry(String command, MythKey mythKey,
+			String friendlyName, boolean requiresConfirm)
+	{
+		this(-1, command, mythKey, friendlyName, requiresConfirm);
+	}
+
 	public String getFriendlyName()
 	{
 		return friendlyName;
@@ -57,4 +65,9 @@
 		return requiresConfirmation;
 	}
 
+	public int getRowID()
+	{
+		return rowId;
+	}
+
 }
Index: src/tkj/android/homecontrol/mythmote/keymanager/KeyBindingManager.java
===================================================================
--- src/tkj/android/homecontrol/mythmote/keymanager/KeyBindingManager.java	(revision 151)
+++ src/tkj/android/homecontrol/mythmote/keymanager/KeyBindingManager.java	(working copy)
@@ -50,11 +50,15 @@
 import tkj.android.homecontrol.mythmote.MythCom;
 import tkj.android.homecontrol.mythmote.db.MythMoteDbManager;
 
+import android.app.AlertDialog;
 import android.content.Context;
+import android.content.DialogInterface;
+import android.text.Editable;
 import android.util.Log;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.View.OnLongClickListener;
+import android.widget.EditText;
 
 public class KeyBindingManager implements KeyMapBinder, OnClickListener,
 		OnLongClickListener
@@ -110,7 +114,7 @@
 		BUTTON_MUTE("key |", ButtonMute),
 		BUTTON_VOLUME_UP("key ]", ButtonVolUp),
 		BUTTON_VOLUME_DOWN("key [", ButtonVolDown);
-		
+
 		private final String defaultCommand;
 		private final int layoutId;
 
@@ -237,11 +241,14 @@
 
 	private MythMoteDbManager databaseAdapter;
 
+	private Context context;
+
 	public KeyBindingManager(final Context ctx, final KeyMapBinder binder,
 			final MythCom communicator)
 	{
 		Log.d("KBM", "Created KeyBindingManager with ctx " + ctx + " binder "
 				+ binder + " comm " + communicator);
+		this.context = context;
 		this.databaseAdapter = new MythMoteDbManager(ctx);
 
 		this.binder = binder;
@@ -278,16 +285,54 @@
 
 		if (null != entry && null != communicator)
 		{
-			Log.d("KBM", "onClick " + entry.getFriendlyName());
+			Log.d("KBM", "onClick " + entry.getFriendlyName()+" command "+entry.getCommand());
 			communicator.SendCommand(entry.getCommand());
 		}
 
 	}
 
-	public boolean onLongClick(View v)
+	public boolean onLongClick(final View v)
 	{
-		// TODO Auto-generated method stub
-		return false;
+		AlertDialog.Builder alert = new AlertDialog.Builder(v.getContext());
+
+		alert.setTitle("Command");
+		alert.setMessage("Type the command to send to MythTV");
+
+		// Set an EditText view to get user input
+		final EditText input = new EditText(v.getContext());
+		KeyBindingEntry currentEntry = viewToEntryMap.get(v);
+		if ( null != currentEntry )
+			input.setText(currentEntry.getCommand());
+		alert.setView(input);
+
+		alert.setPositiveButton("Save", new DialogInterface.OnClickListener()
+		{
+			public void onClick(DialogInterface dialog, int whichButton)
+			{
+				Editable value = input.getText();
+				KeyBindingEntry oldEntry = viewToEntryMap.get(v);
+				if (null != oldEntry && null != communicator)
+				{
+					Log.d("KBM", "onLongClick " + oldEntry.getFriendlyName());
+					KeyBindingEntry entry = new KeyBindingEntry(oldEntry
+							.getRowID(), oldEntry.getFriendlyName(), oldEntry
+							.getMythKey(), value.toString(), oldEntry
+							.requiresConfirmation());
+					viewToEntryMap.put(v, entry);
+					databaseAdapter.save(entry);
+				}
+			}
+		});
+
+		alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener()
+		{
+			public void onClick(DialogInterface dialog, int whichButton)
+			{
+				// Canceled.
+			}
+		});
+
+		alert.show();
+		return true;
 	}
-
 }
Index: src/tkj/android/homecontrol/mythmote/db/MythMoteDbManager.java
===================================================================
--- src/tkj/android/homecontrol/mythmote/db/MythMoteDbManager.java	(revision 151)
+++ src/tkj/android/homecontrol/mythmote/db/MythMoteDbManager.java	(working copy)
@@ -151,6 +151,7 @@
 	public boolean updateFrontendLocation(long rowId, String name,
 			String address, int port)
 	{
+		open();
 		ContentValues args = new ContentValues();
 		args.put(KEY_NAME, name);
 		args.put(KEY_ADDRESS, address);
@@ -158,11 +159,13 @@
 
 		int rows = db.update(FRONTEND_TABLE, args, KEY_ROWID + "=" + rowId,
 				null);
+		close();
 		return rows > 0;
 	}
 
 	public boolean save(final KeyBindingEntry entry)
 	{
+		open();
 		ContentValues values = new ContentValues();
 		values.put(KEYBINDINGS_COMMAND, entry.getCommand());
 		values.put(KEYBINDINGS_UI_KEY, entry.getMythKey().name());
@@ -171,7 +174,14 @@
 				entry.requiresConfirmation() ? 1 : 0);
 		Log.d("KBDA", "Adding entry " + entry.getFriendlyName() + " to "
 				+ entry.getCommand());
-		return db.insert(KEY_BINDINGS_TABLE, null, values) != -1;
+		boolean success = false;
+		if (entry.getRowID() != -1)
+			success= db.update(KEY_BINDINGS_TABLE, values, MythMoteDbHelper.KEYBINDINGS_ROWID + " = ?", new String[]
+			{ String.format("%d", entry.getRowID()) }) == 1;
+		else
+			success= db.insert(KEY_BINDINGS_TABLE, null, values) != -1;
+		close();
+		return success;
 	}
 
 	public void loadKeyMapEntries(final KeyMapBinder binder)
@@ -194,16 +204,7 @@
 			AlertDialog.Builder builder = new AlertDialog.Builder(context);
 			builder.setTitle("DataBase Error");
 			builder.setMessage(e.getLocalizedMessage());
-			builder.setNeutralButton(R.string.ok_str, new OnClickListener()
-			{
-
-				public void onClick(DialogInterface dialog, int which)
-				{
-					// TODO Auto-generated method stub
-
-				}
-			});
-
+			builder.show();
 		}
 		if (null == mCursor)
 			return;
@@ -218,9 +219,11 @@
 			Integer req = mCursor.getInt(mCursor
 					.getColumnIndex(KEYBINDINGS_REQUIRE_CONFIRMATION));
 			MythKey mythKey = MythKey.getByName(mythKeyName);
+			Integer id = mCursor.getInt(mCursor
+					.getColumnIndex(KEYBINDINGS_ROWID));
 			boolean requiresConfirmation = (req == 1);
-			KeyBindingEntry entry = new KeyBindingEntry(friendlyName, mythKey,
-					command, requiresConfirmation);
+			KeyBindingEntry entry = new KeyBindingEntry(id, friendlyName,
+					mythKey, command, requiresConfirmation);
 			binder.bind(entry);
 		} while (mCursor.moveToNext());
 		mCursor.close();
Index: src/tkj/android/homecontrol/mythmote/db/MythMoteDbHelper.java
===================================================================
--- src/tkj/android/homecontrol/mythmote/db/MythMoteDbHelper.java	(revision 151)
+++ src/tkj/android/homecontrol/mythmote/db/MythMoteDbHelper.java	(working copy)
@@ -74,6 +74,7 @@
 			// we are just adding key bindings in this case
 			db.execSQL(CREATE_KEY_BINDINGS_TABLE);
 			createDefaultEntries(db);
+			db.setVersion(newVersion);
 		} else
 		{
 			db.execSQL("DROP TABLE IF EXISTS frontends");
Index: src/tkj/android/homecontrol/mythmote/MythMote.java
===================================================================
--- src/tkj/android/homecontrol/mythmote/MythMote.java	(revision 151)
+++ src/tkj/android/homecontrol/mythmote/MythMote.java	(working copy)
@@ -60,7 +60,7 @@
 		_comm.SetOnStatusChangeHandler(this);
 		
 		keyManager = new KeyBindingManager(this, this, _comm);
-		keyManager.loadKeys();
+		
 
 		// create tab UI
 		_tabHost = getTabHost();
@@ -181,7 +181,7 @@
 
 	/** Called when the selected tab page is changed **/
 	public void onTabChanged(String arg0) {
-
+		keyManager.loadKeys();
 		// get tab tag
 		String tabTag = _tabHost.getCurrentTabTag();
 
@@ -291,43 +291,6 @@
 			_comm.Connect(_location);
 	}
 
-	/** Sets up a mythcom jump button click event **/
-	private final void setupJumpButtonEvent(int buttonViewId,
-			final String jumpPoint) {
-		final Button buttonJump = (Button) this.findViewById(buttonViewId);
-
-		buttonJump.setOnClickListener(new OnClickListener() {
-			public void onClick(View v) {
-				// Perform action on clicks
-				_comm.SendJumpCommand(jumpPoint);
-			}
-		});
-	}
-
-	/** Sets up a mythcom keyboard button click event **/
-	private final void setupKeyButtonEvent(int buttonViewId,
-			final String sendKey) {
-		final Button button = (Button) this.findViewById(buttonViewId);
-		button.setOnClickListener(new OnClickListener() {
-			public void onClick(View v) {
-				// Perform action on clicks
-				_comm.SendKey(sendKey);
-			}
-		});
-	}
-
-	/** Sets up a mythcom playback command button click event **/
-	private final void setupPlaybackCmdButtonEvent(int buttonViewId,
-			final String sendCmd) {
-		final Button button = (Button) this.findViewById(buttonViewId);
-		button.setOnClickListener(new OnClickListener() {
-			public void onClick(View v) {
-				// Perform action on clicks
-				_comm.SendPlaybackCmd(sendCmd);
-			}
-		});
-	}
-
 	/**
 	 * Overridden to allow the hardware volume controls to influence the Myth front end 
 	 * volume control

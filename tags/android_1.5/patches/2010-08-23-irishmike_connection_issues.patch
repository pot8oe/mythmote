Index: src/tkj/android/homecontrol/mythmote/MythCom.java
===================================================================
--- src/tkj/android/homecontrol/mythmote/MythCom.java	(revision 141)
+++ src/tkj/android/homecontrol/mythmote/MythCom.java	(working copy)
@@ -1,9 +1,10 @@
 package tkj.android.homecontrol.mythmote;
 
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
-import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.Socket;
 import java.net.UnknownHostException;
@@ -17,6 +18,7 @@
 import android.os.Handler;
 import android.view.Gravity;
 import android.widget.Toast;
+import android.util.Log;
 
 /** Class that handles network communication with mythtvfrontend **/
 public class MythCom {
@@ -90,7 +92,7 @@
 	public static final String EXIT = "exit";
 	
 	public static final int DEFAULT_MYTH_PORT = 6546;
-	public static final int SOCKET_TIMEOUT = 2000;
+	public static final int SOCKET_TIMEOUT = 15000;
 	public static final int ENABLE_WIFI = 0;
 	public static final int CANCEL = 1;
 	public static final int STATUS_DISCONNECTED = 0;
@@ -99,14 +101,14 @@
 	public static final int STATUS_ERROR = 99;
 	
 	private static Timer _timer;
+	private static Toast _toast;
 	private static Socket _socket;
-	private static OutputStreamWriter _outputStream;
-	private static InputStreamReader  _inputStream;
+	private static BufferedWriter _outputStream;
+	private static BufferedReader  _inputStream;
 	private static Activity _parent;
 	private static ConnectivityManager _conMgr;
 	private static String _status;
-	private static String _tmpStatus;
-	private static int _tmpStatusCode;
+	private static int _statusCode;
 	private static StatusChangedEventListener _statusListener;
 	private static FrontendLocation _frontend;
 	
@@ -115,7 +117,9 @@
 	{
 		public void run()
 		{
-			setStatus(_tmpStatus, _tmpStatusCode);
+			setStatus(_status, _statusCode);
+			if(_statusCode!=STATUS_CONNECTING)
+			    _toast.cancel();
 		}
 		
 	};
@@ -127,12 +131,11 @@
 		public void run() 
 		{
 			//only if socket is connected
-			if(IsConnected())
+			if(IsConnected() && !IsConnecting())
 			{
 				//set disconnected status if nothing is returned.
 				if(queryMythScreen() == null)
 				{
-					//_timer.cancel();
 					setStatus("Disconnected", STATUS_DISCONNECTED);
 				}
 				else
@@ -148,24 +151,25 @@
 	public MythCom(Activity parentActivity)
 	{
 		_parent = parentActivity;
-		_conMgr = (ConnectivityManager) _parent.getSystemService(Context.CONNECTIVITY_SERVICE);
-		_timer = new Timer();
-		_timer.schedule(timerTaskCheckStatus, 5000, 5000);
+		_statusCode=STATUS_DISCONNECTED;
+        _timer = new Timer();
+        _timer.schedule(timerTaskCheckStatus, 5000, 5000);
+		
 	}
 	
 	/** Connects to the given address and port. Any existing connection will be broken first **/
 	public void Connect(FrontendLocation frontend)
 	{
-			//disconnect before we connect
-			this.Disconnect();
-			
+		    
+		    _conMgr = (ConnectivityManager) _parent.getSystemService(Context.CONNECTIVITY_SERVICE);
+		    
 			//set address and port
 			_frontend = frontend;
 			
 			//create toast for all to eat and enjoy
-			Toast toast = Toast.makeText(_parent.getApplicationContext(), R.string.attempting_to_connect_str, Toast.LENGTH_SHORT);
-			toast.setGravity(Gravity.CENTER, 0, 0);
-			toast.show();
+			_toast = Toast.makeText(_parent.getApplicationContext(), R.string.attempting_to_connect_str, Toast.LENGTH_SHORT);
+			_toast.setGravity(Gravity.CENTER, 0, 0);
+			_toast.show();
 
 			this.setStatus("Connecting", STATUS_CONNECTING);
 			
@@ -176,6 +180,7 @@
 	/** Closes the socket if it exists and it is already connected **/
 	public void Disconnect()
 	{
+        _statusCode=STATUS_DISCONNECTED;
 		try
 		{
 			//send exit if connected
@@ -196,11 +201,15 @@
 				_inputStream.close();
 				_inputStream = null;
 			}
+			if(_socket != null)
+			{
+			    if(!_socket.isClosed())
+				    _socket.close();
 			
-			if(this.IsConnected())
-				_socket.close();
-			if(_socket != null)
 				_socket = null;
+			}
+			if(_conMgr != null)
+				_conMgr = null;
 		}
 		catch(IOException ex)
 		{
@@ -251,36 +260,21 @@
 	
 	public boolean IsConnected()
 	{
-		if(_socket == null) return false;
-		
-		return (!_socket.isClosed()) && _socket.isConnected();
+		if(_statusCode==STATUS_CONNECTED) return true;
+		return false;
 	}
 
-	/** Returns true if a route to the given InetAddress is available. **/
-	private static boolean checkRouteToHost(InetAddress address)throws IOException
+	public boolean IsConnecting()
 	{
-		//TODO SDK is depreciated. If we target a newer frame work chage to SDK_INT
-		int version = Integer.parseInt(android.os.Build.VERSION.SDK);
-		
-		if(version <= 4)//androind 1.x
-		{
-			return _conMgr.requestRouteToHost(ConnectivityManager.TYPE_WIFI, address.hashCode()) ||
-			_conMgr.requestRouteToHost(ConnectivityManager.TYPE_MOBILE, address.hashCode());
-		}
-		else //android 2.x
-		{
-			return address.isReachable(30);
-		}
-		
+		if(_statusCode==STATUS_CONNECTING) return true;
+		return false;
 	}
-
 	
-	
 	/** Connects _socket to _frontend using a separate thread  **/
 	private void connectSocket()
 	{
-		//create socket
-		_socket = new Socket();
+		if(_socket==null)
+		    _socket = new Socket();
 		
 		Thread thread = new Thread()
 		{
@@ -288,41 +282,54 @@
 			{
 				try
 				{
-					InetAddress address = java.net.InetAddress.getByName(_frontend.Address);
+					_socket.connect(new InetSocketAddress(_frontend.Address, _frontend.Port));
 					
-					if(checkRouteToHost(address))
+					if(_socket.isConnected())
 					{
-						_socket.connect(new InetSocketAddress(address, _frontend.Port), SOCKET_TIMEOUT);
-						_outputStream = new OutputStreamWriter(_socket.getOutputStream());
-						_inputStream = new InputStreamReader(_socket.getInputStream());
-						
-						//check if everything was connected OK
-						if(!_socket.isConnected() || _outputStream == null)
-						{
-							_tmpStatus = "Unknown error getting output stream.";
-							_tmpStatusCode = STATUS_ERROR;
-						}
-						else
-						{
-							_tmpStatus = _frontend.Name + " - Connected";
-							_tmpStatusCode = STATUS_CONNECTED;
-						}
+					    _outputStream = new BufferedWriter(new OutputStreamWriter(_socket.getOutputStream()));
+					    _inputStream = new BufferedReader(new InputStreamReader(_socket.getInputStream()));
 					}
 					else
 					{
-						_tmpStatus = "No route to host: " + _frontend.Address;
-						_tmpStatusCode = STATUS_ERROR;
+						_status = "Could not open socket.";
+						_statusCode = STATUS_ERROR;
 					}
+
+					//check if everything was connected OK
+					if(!_socket.isConnected() || _outputStream == null)
+					{
+						_status = "Unknown error getting output stream.";
+						_statusCode = STATUS_ERROR;
+					}
+					else
+					{
+						_status = _frontend.Name + " - Connected";
+						_statusCode = STATUS_CONNECTED;
+					}
+
 				}
 				catch (UnknownHostException e)
 				{
-					_tmpStatus = "Unknown host: " + _frontend.Address;
-					_tmpStatusCode = STATUS_ERROR;
+					_status = "Unknown host: " + _frontend.Address;
+					_statusCode = STATUS_ERROR;
 				}
 				catch (IOException e)
 				{
-					_tmpStatus = e.getLocalizedMessage() + ": " + _frontend.Address;
-					_tmpStatusCode = STATUS_ERROR;
+					_status = "IO Except: " + e.getLocalizedMessage() + ": " + _frontend.Address;
+					_statusCode = STATUS_ERROR;
+					if(_inputStream!=null)
+					{
+						_inputStream=null;
+					}
+					if(_socket!=null)
+					{
+						if(!_socket.isClosed())
+							try {
+								_socket.close();
+							} catch (IOException e1) {
+							}
+						_socket = null;
+					}
 				}
 				
 				//post results
@@ -330,13 +337,12 @@
 			}
 		};
 		
-		//run thread
 		thread.start();
 	}
 	
 	/** Sends data to the output stream of the socket.
 	 * Attempts to reconnect socket if connection does not already exist. **/
-	private void sendData(String data)
+	private boolean sendData(String data)
 	{
 		if(this.IsConnected() && _outputStream != null)
 		{
@@ -347,38 +353,47 @@
 				
 				_outputStream.write(data);
 				_outputStream.flush();
+				return true;
 			}
 			catch (IOException e)
 			{
-				this.setStatus("I/O Error data", STATUS_ERROR);
+				e.printStackTrace();
+				this.setStatus(e.getLocalizedMessage() + ": " + _frontend.Address , STATUS_ERROR);
+				this.Disconnect();
+				return false;
 			}
 		}
+		return false;
 	}
 	
 	/** Reads data from the input stream of the socket.
 	 * Returns null if no data in received **/
-	private char[] readData()
+	private String readData()
 	{
+		String outString = "";
 		if(this.IsConnected() && _inputStream != null )
 		{
-			char[] buf = new char[100];
+			
 			try 
 			{
 				if(_inputStream.ready())
-				{
-					int len = _inputStream.read(buf);
-					if(len > 0)
-						return buf;
-				}
+					outString =_inputStream.readLine() ;
+
 			} 
 			catch (IOException e) 
 			{
-				// TODO Auto-generated catch block
 				e.printStackTrace();
+				this.setStatus(e.getLocalizedMessage() + ": " + _frontend.Address , STATUS_ERROR);
+				this.Disconnect();
+				return null;
 			}
 		}
-		//return null if no data was received
-		return null;
+		if(outString!=""){
+			return outString;
+		}else{
+			Log.e	(_status, "Null outstring");
+			return null;
+		}
 	}
 	
 	/** Sets _status and fires the StatusChanged event **/
@@ -400,24 +415,23 @@
 	 * screen location. Returns null on error **/
 	private String queryMythScreen()
 	{
-		//send query location command
-		this.sendData("query location");
-		
-		//read input stream
-		char[] data = this.readData();
-		
-		if(data != null && data.length > 0)
+
+		if(this.sendData("query location"))
 		{
-			return data.toString();
+		    if(this.IsConnected()){
+		    	return this.readData();
+		    	
+		    }else{
+				Log.e(_status, "Not connected on receive");
+				return null;
+		    }
 		}
 		else
 		{
-			//we're not receiving data the other 
-			//end must have disconnected
+			Log.e(_status, "Send failed");
 			return null;
 		}
+
 	}
-
-
 	
 }
Index: src/tkj/android/homecontrol/mythmote/MythMote.java
===================================================================
--- src/tkj/android/homecontrol/mythmote/MythMote.java	(revision 141)
+++ src/tkj/android/homecontrol/mythmote/MythMote.java	(working copy)
@@ -49,12 +49,16 @@
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         
-        //create comm class
-        _comm = new MythCom(this);
-        
+        if(_comm==null) {
+            //create comm class
+            _comm = new MythCom(this);
+        }
         //set status changed event handler
         _comm.SetOnStatusChangeHandler(this);
         
+        
+        //this.setSelectedLocation();
+        
         //create tab UI
         _tabHost = getTabHost();
         
@@ -67,7 +71,7 @@
         //set navigation tab and setup events
         _tabHost.setCurrentTab(0);
         
-        //setup navifation panel button events
+        //setup navigation panel button events
         setupNavigationPanelButtonEvents();
     }
     
@@ -76,8 +80,14 @@
     public void onResume(){
     	super.onResume();
 
-    	//connect to saved location
-        connectToSelectedLocation();
+    	if(!_comm.IsConnected() && !_comm.IsConnecting()) {
+    		_comm.Disconnect();
+    		
+        	if(this.setSelectedLocation())
+        		_comm.Connect(_location);
+    	}else{
+    		this.StatusChanged(_location.Name + " - Connected", MythCom.STATUS_CONNECTED);
+    	}
     }
     
 	/** Called when the activity is paused **/
@@ -85,11 +95,17 @@
     public void onPause(){
     	super.onPause();
     	
-    	//disconnect from frontend
-    	_comm.Disconnect();
-
     }
     
+    public void onDestroy(){
+    	super.onDestroy();
+    	
+    	if(_comm.IsConnected())
+    		_comm.Disconnect();
+    	_tabHost = null;
+    	
+    }
+    
     /** Called when device configuration changes occur. Configuration 
      * changes that cause this function to be called must be 
      * registered in AndroidManifest.xml **/
@@ -166,8 +182,11 @@
 				   	break;
 
 		   		case RECONNECT_ID:
-		   			//connect to selected location
-		   			this.connectToSelectedLocation();
+		   			if(_comm.IsConnected())
+		   			    _comm.Disconnect();
+		   			
+		   	    	if(this.setSelectedLocation())
+		   	    		_comm.Connect(_location);
 		   			break;
 		   			
 		   		case SELECTLOCATION_ID:
@@ -180,7 +199,7 @@
 	   }
 	   catch(android.content.ActivityNotFoundException ex)
 	   {
-		   //Show error when actibity is not found
+		   //Show error when activity is not found
 		   AlertDialog.Builder diag = new AlertDialog.Builder(this);
 		   diag.setMessage(ex.getMessage());
 		   diag.setTitle("Error");
@@ -270,9 +289,11 @@
 
 	/** Called when the frontend location is changed */
 	public void LocationChanged() {
+		if(_comm.IsConnected())
+		    _comm.Disconnect();
 		
-		//connect to selected location
-		this.connectToSelectedLocation();
+    	if(this.setSelectedLocation())
+    		_comm.Connect(_location);
 	}
    
 	/** Called when MythCom status changes **/
@@ -300,19 +321,19 @@
 	}
 	
     /** Reads the selected frontend from preferences and attempts to connect with MythCom.Connect() **/
-	private void connectToSelectedLocation() {
+	private boolean setSelectedLocation() {
 		
 		//load shared preferences
 		this.loadSharedPreferences();
 
 		//create location database adapter
-        LocationDbAdapter dbAdatper = new LocationDbAdapter(this);
+        LocationDbAdapter dbAdapter = new LocationDbAdapter(this);
         
         //open connect
-        dbAdatper.open();
+        dbAdapter.open();
         
         //get the selected location information by it's ID
-        Cursor cursor = dbAdatper.fetchFrontendLocation(selected);
+        Cursor cursor = dbAdapter.fetchFrontendLocation(selected);
         
         //make sure returned cursor is valid
         if(cursor != null && cursor.getCount() > 0)
@@ -323,14 +344,16 @@
         	_location.Address = cursor.getString(cursor.getColumnIndex(LocationDbAdapter.KEY_ADDRESS));
         	_location.Port = cursor.getInt(cursor.getColumnIndex(LocationDbAdapter.KEY_PORT));
         }
+        else
+        {
+        	return false;
+        }
         
         //close cursor and db adapter
         cursor.close();
-        dbAdatper.close();
+        dbAdapter.close();
+        return true;
     	
-    	//connect to location if it is not null
-    	if(_location != null)
-    		_comm.Connect(_location);
 	}
 	
 	/** Sets up the navigation tab's button events **/
